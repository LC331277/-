from web3 import Web3
import random
import logging
from tabulate import tabulate

# 配置日志
logging.basicConfig(level=logging.INFO)

# BASE 网络 RPC URL
BASE_RPC_URL = "https://mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID"  # 替换为你的RPC URL
web3 = Web3(Web3.HTTPProvider(BASE_RPC_URL))

def get_token_balances(token_contract_address, block_number, holders):
    token_abi = [{"constant": True, "inputs": [{"name": "_owner", "type": "address"}], "name": "balanceOf", "outputs": [{"name": "balance", "type": "uint256"}], "type": "function"}]
    try:
        contract = web3.eth.contract(address=Web3.to_checksum_address(token_contract_address), abi=token_abi)
        return {holder: contract.functions.balanceOf(Web3.to_checksum_address(holder)).call(block_identifier=block_number) for holder in holders if contract.functions.balanceOf(Web3.to_checksum_address(holder)).call(block_identifier=block_number) > 0}
    except Exception as e:
        logging.error(f"Error in get_token_balances for {token_contract_address}: {e}")
        return {}

def weighted_random_selection(block_number, ar_contract, aistr_contract, alch_contract, holders, num_winners=100):
    try:
        balances = {}
        for contract_address in [ar_contract, aistr_contract, alch_contract]:
            balances.update(get_token_balances(contract_address, block_number, holders))

        total_weight = sum(balances.values())
        if total_weight == 0:
            logging.warning("Total weight is zero, no winners can be selected.")
            return []

        probabilities = {address: balance / total_weight for address, balance in balances.items()}
        winners = random.choices(list(probabilities.keys()), weights=list(probabilities.values()), k=num_winners)

        # 去重（虽然random.choices在Python 3.6+保证不重复选取）
        unique_winners = list(dict.fromkeys(winners))

        # 获取余额信息
        detailed_winners = []
        for winner in unique_winners:
            detailed_winners.append({
                "address": winner,
                "ar_balance": balances.get(winner, 0),
                "aistr_balance": balances.get(winner, 0),
                "alch_balance": balances.get(winner, 0)
            })

        return detailed_winners
    except Exception as e:
        logging.error(f"Error in weighted_random_selection: {e}")
        return []

# 使用示例
if __name__ == "__main__":
    block_number = 12345678  # 替换为实际区块号
    ar_contract = "0x3e43cB385A6925986e7ea0f0dcdAEc06673d4e10"
    aistr_contract = "0x20ef84969f6d81ff74ae4591c331858b20ad82cd"
    alch_contract = "0x2b0772bea2757624287ffc7feb92d03aeae6f12d"

    holders = ["0xAlice", "0xBob", "0xCharlie"]  # 替换为实际持有者地址

    winners = weighted_random_selection(block_number, ar_contract, aistr_contract, alch_contract, holders)

    if winners:
        headers = ["Address", "AR Balance", "AISTR Balance", "ALCH Balance"]
        table = [[winner["address"], winner["ar_balance"], winner["aistr_balance"], winner["alch_balance"]] for winner in winners]
        print(tabulate(table, headers=headers, tablefmt="grid"))
    else:
        print("No winners selected.")
